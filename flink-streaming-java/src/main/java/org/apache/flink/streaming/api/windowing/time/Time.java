package org.apache.flink.streaming.api.windowing.time;

import org.apache.flink.annotation.Public;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NonNull;

import java.util.concurrent.TimeUnit;

import static org.apache.flink.util.Preconditions.checkNotNull;

/**
 * The definition of a time interval for windowing. The time characteristic referred
 * to is the default time characteristic set on the execution environment.
 */
@Getter
@AllArgsConstructor
@Public
public final class Time {

	/** The time unit for this policy's time interval. */
	@NonNull
	final TimeUnit unit;

	/** The size of the windows generated by this policy. */
	private final long size;


	/**
	 * Converts the time interval to milliseconds.
	 * @return The time interval in milliseconds.
	 */
	public long toMilliseconds() {
		return unit.toMillis(size);
	}

	// ------------------------------------------------------------------------
	//  Factory
	// ------------------------------------------------------------------------

	/**
	 * Creates a new {@link Time} of the given duration and {@link TimeUnit}.
	 *
	 * <p>The {@code Time} refers to the time characteristic that is set on the dataflow via
	 * {@link org.apache.flink.streaming.api.environment.StreamExecutionEnvironment#setStreamTimeCharacteristic(org.apache.flink.streaming.api.TimeCharacteristic)}.
	 *
	 * @param size The duration of time.
	 * @param unit The unit of time of the duration, for example {@code TimeUnit.SECONDS}.
	 * @return The time policy.
	 */
	public static Time of(long size, TimeUnit unit) {
		return new Time(size, unit);
	}

	/**
	 * Creates a new {@link Time} that represents the given number of milliseconds.
	 */
	public static Time milliseconds(long milliseconds) {
		return of(milliseconds, TimeUnit.MILLISECONDS);
	}

	/**
	 * Creates a new {@link Time} that represents the given number of seconds.
	 */
	public static Time seconds(long seconds) {
		return of(seconds, TimeUnit.SECONDS);
	}

	/**
	 * Creates a new {@link Time} that represents the given number of minutes.
	 */
	public static Time minutes(long minutes) {
		return of(minutes, TimeUnit.MINUTES);
	}

	/**
	 * Creates a new {@link Time} that represents the given number of hours.
	 */
	public static Time hours(long hours) {
		return of(hours, TimeUnit.HOURS);
	}

	/**
	 * Creates a new {@link Time} that represents the given number of days.
	 */
	public static Time days(long days) {
		return of(days, TimeUnit.DAYS);
	}
}
