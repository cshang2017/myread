package org.apache.flink.table.delegation;

import org.apache.flink.annotation.Internal;
import org.apache.flink.api.common.JobExecutionResult;
import org.apache.flink.api.dag.Pipeline;
import org.apache.flink.api.dag.Transformation;
import org.apache.flink.core.execution.JobClient;
import org.apache.flink.table.api.TableConfig;
import org.apache.flink.table.api.TableEnvironment;

import java.util.List;

/**
 * It enables execution of a {@link Transformation}s graph generated by
 * {@link Planner}.
 *
 * <p>This uncouples the {@link TableEnvironment} from any given runtime.
 */
@Internal
public interface Executor {

	/**
	 * Translates the given transformations to a Pipeline.
	 *
	 * @param transformations list of transformations
	 * @param jobName what should be the name of the job
	 * @return The pipeline representing the transformations.
	 */
	Pipeline createPipeline(
		List<Transformation<?>> transformations,
		TableConfig tableConfig,
		String jobName);

	/**
	 * Executes the given pipeline.
	 *
	 * @param pipeline the pipeline to execute
	 * @return The result of the job execution, containing elapsed time and accumulators.
	 * @throws Exception which occurs during job execution.
	 */
	JobExecutionResult execute(Pipeline pipeline) throws Exception;

	/**
	 * Executes the given pipeline asynchronously.
	 *
	 * @param pipeline the pipeline to execute
	 * @return A {@link JobClient} that can be used to communicate with the submitted job,
	 *         completed on submission succeeded.
	 * @throws Exception which occurs during job execution.
	 */
	JobClient executeAsync(Pipeline pipeline) throws Exception;
}
