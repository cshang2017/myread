

package org.apache.flink.table.planner.plan.schema

import org.apache.flink.annotation.Internal
import org.apache.flink.table.planner.plan.`trait`.{ModifyKindSet, UpdateKind}
import org.apache.flink.table.planner.plan.stats.FlinkStatistic

import org.apache.calcite.rel.RelNode

import java.util.{List => JList}

/**
  * An intermediate Table to wrap a optimized RelNode inside. The input data of this Table is
  * generated by the underlying optimized RelNode.
  *
  * @param relNode       underlying optimized RelNode
 *  @param modifyKindSet the modify operations kind sets will be produced by the underlying relNode
  * @param isUpdateBeforeRequired  true relNode is required to send UPDATE_BEFORE message
 *                                for update changes by some parent blocks.
  * @param statistic     statistics of current Table
  */
@Internal
class IntermediateRelTable(
    names: JList[String],
    val relNode: RelNode,
    val modifyKindSet: ModifyKindSet,
    val isUpdateBeforeRequired: Boolean,
    statistic: FlinkStatistic = FlinkStatistic.UNKNOWN)
  extends FlinkPreparingTableBase(null, relNode.getRowType, names, statistic) {

  def this(names: JList[String], relNode: RelNode) {
    this(names, relNode, ModifyKindSet.INSERT_ONLY, false)
  }
}
